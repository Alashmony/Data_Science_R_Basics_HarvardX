Book @ https://rafalab.dfci.harvard.edu/dsbook/r-basics.html

1.1 Motivation and getting started:
Case Study: https://rafalab.dfci.harvard.edu/dsbook/r-basics.html#case-study-us-gun-murders
Install R (CRAN): 
    - Go: https://cran.r-project.org/
    - Choose OS
    - Choose the base distribution
    - Install
Install RStudio:
    - Go to: https://www.rstudio.com/products/rstudio/download/
    - Download the installer
    - Install R
Get the key binding Cheat sheet from RStudio:
    - Help
    - Cheat Sheets
    - RStudio IDE Cheat sheet

To install a package:
    - ```install.packages("pack1","pack2")``` OR
    - From RStudio:
        - Tools --> Install Packages --> Enter package names (use auto complete to write faster) sepated with a comma ","
    
- To check the installed packages use:
    - ```installed.packages()```    

- To use an installed package
    - ```library(pack_name)```

RStudio has many useful features as an R editor, including the ability to test code easily as we write scripts and several autocomplete features.
Keyboard shortcuts:
    Save a script: Ctrl+S on Windows and Command+S on Mac
    Run an entire script:  Ctrl+Shift+Enter on Windows Command+Shift+Return on Mac, or click "Source" on the editor pane
    Run a single line of script: Ctrl+Enter on Windows and Command+Return on Mac while the cursor is pointing to that line, or select the chunk and click "run"
    Open a new script: Ctrl+Shift+N on Windows and Command+Shift+N on Mac

1.2 R basics
Assigning variables:
    - Use "<-" to assign a value to a variable, for example:
        ```a <- 1```
        assigns the value 1 to the variable a
    - You can also assign with the equal sign "="
        ```b = 2```
        Assigns the value 2 to the variable b
Printing:
    - Just like python, use the print() function to print the value
        ```print(a)```
        prints the value for the variable a
Getting vaiables stored in the workspace (session)
    - use ls() to get all variables stored in the workspace
    - RStudio has a tab called "Environement" that shows also the vaiables stored
Functions:
    - Some pre-defined functions was shown previously like ls(), install.packages(), and sqrt() for calculating the square root
    - You can get the function script by writting its name without prancits, for example ```ls``` only
    - To get the documentation for a function, use ```help("function_name")``` or ```?function_name```
    - To find out which args are mandatory, you will find them without a default value in the docs
    - to know what are the arguments for any funciton, use ```args(function_name)``` and you will notics also the args with default value
    - Assigning arguments with the equal sign "=" NOT the assignment sign "<-"
    - The arthematic operators as an exception, does not need the prackets by default, for example:
        ```1+2```
        ```5^3```
    - To get help for arthematic operators, use the help() function with any arthematic operator or the question mark "?", for example:
        ```help("+")```
        ```?"^"```
Datasets:
    - Some pre-built Datasets are available in R by default
    - To find them out, use the ```data()``` function
    - To call a dataset, just run its name, for example: ```Co2```
Variable naming:
    - variable names must start with a letter and must not contain spaces
    - avoid naming variables with the names of pre-defined functions in R

1.3 Data Types:
Data Types:
    - To know the data type, use the class() function, for example ```class(ls)``` 
    - Data are stored in data.frame
Data Frames:
    - To load a data frame, use data("dataset_name"), for example:
        ```data("murders")```
    - To get the data structure, use the str() function
        ```str(murders)```
    - To get the first observations (records/rows), use head() funciton
        ```head(murders)```
    - The data.frame object, uses every column as a variable
    - To access a column, we use the dollar sign simbol (The accessor), for example:
        ```murders$population```
    - To access column names, use the names() function, for example:
        ```names(murders)```
    - Each column is a vector 
    - To find out how many records in the vector, use the length() function. For example:
        ```
        pop <- murders$population
        length(pop)
        ```
Character vectors:
    - Characters are distingueshed by the double quotes around them "Character"
    - As numeric vectords, all entries needs to be a Character in a character vector
    - an example: ```class(murders$state)``` 
Logiacal vectors:
    - A vector of True/False only
Factors:
    - Like a string but it is a categorical data with limited values
    - factors are another type of class
        ```class(murders$region)``` 
        shows that region is a factor vector
    - obtaining the levels of a factor with the level() function
        ```levels(murders$region)```
    - Factors are stored as numeric values in R which is faster and more memory-friendly



Multiple ways to access variables
An important lesson you should learn early on is that there are multiple ways to do things in R. For example, to generate the first five integers we note that 1:5 and seq(1,5) return the same result.

There are also multiple ways to access variables in a data frame. For example we can use the square brackets ```[[``` instead of the accessor ```$```. Example code is included in the editor.
```murders[["population"]]```
If you instead try to access a column with just one bracket,

murders["population"]
R returns a subset of the original data frame containing just this column. This new object will be of class data.frame rather than a vector. To access the column itself you need to use either the $ accessor or the double square brackets [[.

Parentheses, in contrast, are mainly used alongside functions to indicate what argument the function should be doing something to. For example, when we did class(p) in the last question, we wanted the function class to do something related to the argument p.

This is an example of how R can be a bit idiosyncratic sometimes. It is very common to find it confusing at first.

Then use the identical() function to determine if a, as defined in the previous exercises, and b are the same.

Tables
The function table() takes a vector as input and returns the frequency of each unique element in the vector.
We will use the table function to answer this question.

Use the table function in one line of code to create a table showing the number of states per region.
