0
00:00:00,000 --> 00:00:09,130


1
00:00:09,130 --> 00:00:12,360
RAFAEL IRIZARRY: Now that we have some basic R knowledge under our belt,

2
00:00:12,360 --> 00:00:15,860
let's try to gain some insights into the safety of different states

3
00:00:15,860 --> 00:00:18,830
in the context of gun murders.

4
00:00:18,830 --> 00:00:22,380
We want to rank the states from least to most dangerous.

5
00:00:22,380 --> 00:00:26,510
The function sort, sorts a vector in increasing order.

6
00:00:26,510 --> 00:00:31,580
So we can see the largest total number of gun murders by simply typing sort,

7
00:00:31,580 --> 00:00:34,580
and then murders$total.

8
00:00:34,580 --> 00:00:39,680
And we can see that the state with the smallest number of murders had 2,

9
00:00:39,680 --> 00:00:43,880
and the one with the most had 1,257.

10
00:00:43,880 --> 00:00:48,380
However, this does not give us any information about the states, only

11
00:00:48,380 --> 00:00:50,540
about the totals.

12
00:00:50,540 --> 00:00:53,960
The function order is closer to what we want.

13
00:00:53,960 --> 00:00:58,700
It takes a vector and returns the indices that sorts that vector.

14
00:00:58,700 --> 00:01:02,340
This may sound confusing, so let's look at a simple example.

15
00:01:02,340 --> 00:01:05,150
Consider this very simple vector of five numbers--

16
00:01:05,150 --> 00:01:08,540
31, 4, 15, 92, and 65.

17
00:01:08,540 --> 00:01:10,610
If I type sort, it puts them in order--

18
00:01:10,610 --> 00:01:14,840
4, 15, 31, 65, 92.

19
00:01:14,840 --> 00:01:17,930
Rather than sort the vector, the function order

20
00:01:17,930 --> 00:01:23,090
gives us back the index that if used to index the vector, will sort it.

21
00:01:23,090 --> 00:01:30,540
So if I type index, and I assign order of x, now if I index x by that index,

22
00:01:30,540 --> 00:01:33,100
I get back the sorted numbers.

23
00:01:33,100 --> 00:01:37,280
If we look at the object index, we see why it works.

24
00:01:37,280 --> 00:01:38,060
Look at x--

25
00:01:38,060 --> 00:01:41,270
31, 4, 15, 92, 65.

26
00:01:41,270 --> 00:01:45,350
If I type order(x), I get 2, 3, 1, 5, 4.

27
00:01:45,350 --> 00:01:48,140
This is the index that puts x in order.

28
00:01:48,140 --> 00:01:52,670
2 is the first entry because the second entry of x

29
00:01:52,670 --> 00:01:54,800
is 4, which is the smallest number.

30
00:01:54,800 --> 00:01:58,280
The second smallest is 15, which is in the third location.

31
00:01:58,280 --> 00:02:03,690
So 3 is the second entry of order(x), et cetera.

32
00:02:03,690 --> 00:02:06,440
So how does this help us order the states by murders?

33
00:02:06,440 --> 00:02:09,020
First, remember that the entries of vectors

34
00:02:09,020 --> 00:02:12,320
you accessed with the dollar sign follow the same order

35
00:02:12,320 --> 00:02:14,280
as the rows in the table.

36
00:02:14,280 --> 00:02:18,350
So for example, these two vectors containing the state names and state

37
00:02:18,350 --> 00:02:21,710
abbreviations respectively, match their order.

38
00:02:21,710 --> 00:02:24,290
We only show the first entries so that it fits on the screen,

39
00:02:24,290 --> 00:02:27,410
but notice that we have Alabama, Alaska, Arizona, et cetera,

40
00:02:27,410 --> 00:02:29,550
and in the other one, we have AL, AK, AZ.

41
00:02:29,550 --> 00:02:32,570
Those are the abbreviations that goes with those three states.

42
00:02:32,570 --> 00:02:35,810
If you look through all 10, you see that they match.

43
00:02:35,810 --> 00:02:40,550
This means we can now order the state names by their total murders

44
00:02:40,550 --> 00:02:44,990
by first obtaining the index that orders according to murder totals,

45
00:02:44,990 --> 00:02:51,020
and then indexing the state names or abbreviations using that index.

46
00:02:51,020 --> 00:02:51,890
Let's type it here.

47
00:02:51,890 --> 00:02:57,620
Let's define index with the order of the totals, and then index the murders

48
00:02:57,620 --> 00:03:02,510
abbreviations to see the states ordered by murder totals.

49
00:03:02,510 --> 00:03:10,590
We see that Vermont has the lowest total and California has the most murders.

50
00:03:10,590 --> 00:03:13,190
Now, there's actually a much faster way of doing this,

51
00:03:13,190 --> 00:03:15,770
of getting the biggest or the smallest.

52
00:03:15,770 --> 00:03:18,990
If we are only interested in the entry with the largest value,

53
00:03:18,990 --> 00:03:20,780
we can use the function max.

54
00:03:20,780 --> 00:03:27,530
So max of the murders total gives us 1,257, the largest number.

55
00:03:27,530 --> 00:03:32,160
And which.max gives us the index where this number resides.

56
00:03:32,160 --> 00:03:37,610
So if I define i_max as which.max of the murders total,

57
00:03:37,610 --> 00:03:41,920
I get back the index for which that value is 1,257,

58
00:03:41,920 --> 00:03:45,699
and now I can index the state names, and get back

59
00:03:45,699 --> 00:03:47,240
the answer which we were looking for.

60
00:03:47,240 --> 00:03:53,260
California is the state with the largest number of total murders.

61
00:03:53,260 --> 00:03:57,930
For the minimum, we can do the same with min and which.min.

62
00:03:57,930 --> 00:04:01,190
So is California the most dangerous state?

63
00:04:01,190 --> 00:04:05,360
In the next section, we argue that we should be considering rates, not total.

64
00:04:05,360 --> 00:04:10,700
But before doing that, we introduce one last order related function-- rank.

65
00:04:10,700 --> 00:04:13,070
For any given list, it gives you a vector

66
00:04:13,070 --> 00:04:16,459
with the rank of the first entry, second entry, et cetera.

67
00:04:16,459 --> 00:04:17,910
Here's a simple example.

68
00:04:17,910 --> 00:04:20,149
Let's look at that vector we defined earlier--

69
00:04:20,149 --> 00:04:22,940
31, 4, 15, 92 65.

70
00:04:22,940 --> 00:04:27,380
If I type rank of x, I get back 3, 1, 2, 5, 4.

71
00:04:27,380 --> 00:04:28,070
Why?

72
00:04:28,070 --> 00:04:34,560
Because 31, the first entry of x, is the third smallest value in x.

73
00:04:34,560 --> 00:04:37,430
4 is the smallest, so that one gets a 1.

74
00:04:37,430 --> 00:04:41,720
15 is the second smallest, so it gets a 2, et cetera.

75
00:04:41,720 --> 00:04:45,050
To summarize, let's look at the results of the three functions

76
00:04:45,050 --> 00:04:46,840
we have introduced.

77
00:04:46,840 --> 00:04:49,700
In the first column of this table, we have the original vector--

78
00:04:49,700 --> 00:04:52,030
31, 4, 15, 92, 65.

79
00:04:52,030 --> 00:04:55,106
In the second column, we have the result of sort.

80
00:04:55,106 --> 00:04:58,230
In the third column, we have the result of order, and in the fourth column,

81
00:04:58,230 --> 00:05:00,110
we have the result of rank.

82
00:05:00,110 --> 00:05:03,860
Notice that the sort column simply has the original sorted.

83
00:05:03,860 --> 00:05:07,940
So we have the values going from the smallest to the biggest.

84
00:05:07,940 --> 00:05:13,370
Order, again, gives us the index needed to obtain the sorted data.

85
00:05:13,370 --> 00:05:19,280
So because in the sort column, the first entry is a 4, in order, we have 2.

86
00:05:19,280 --> 00:05:20,030
Why?

87
00:05:20,030 --> 00:05:23,870
Because if we go to the original, we need to go to the second entry

88
00:05:23,870 --> 00:05:25,450
to get that 4.

89
00:05:25,450 --> 00:05:28,500
In the second row of order, we have a 3.

90
00:05:28,500 --> 00:05:29,000
Why?

91
00:05:29,000 --> 00:05:31,670
Because to get a 15, the second smallest,

92
00:05:31,670 --> 00:05:36,820
we need to go to the third column of the original to get 15.

93
00:05:36,820 --> 00:05:37,880
Et cetera.

94
00:05:37,880 --> 00:05:42,300
Now, the final column rank, gives us the ranks of the original vector.

95
00:05:42,300 --> 00:05:45,960
31 is the third smallest, 4 is the smallest,

96
00:05:45,960 --> 00:05:49,030
15 is the second smallest, et cetera.

97
00:05:49,030 --> 00:05:51,410
All right, now that we have learned about sorting in R,

98
00:05:51,410 --> 00:05:56,710
we have some useful tools to answer questions about the data at hand.

99
00:05:56,710 --> 00:06:02,838


