0
00:00:00,000 --> 00:00:02,682


1
00:00:02,682 --> 00:00:08,696
[MUSIC PLAYING]

2
00:00:08,696 --> 00:00:12,880
RAFAEL IRIZARRY: The most basic unit available in R to store data

3
00:00:12,880 --> 00:00:14,340
are vectors.

4
00:00:14,340 --> 00:00:19,270
Complex datasets can usually be broken down into components that are vectors.

5
00:00:19,270 --> 00:00:23,440
For example, in a data frame such as the murders data frame,

6
00:00:23,440 --> 00:00:25,840
each column is a vector.

7
00:00:25,840 --> 00:00:29,960
In this video, we're going to learn more about this important class.

8
00:00:29,960 --> 00:00:33,070
Let's start by learning how to create vectors.

9
00:00:33,070 --> 00:00:36,820
One way we can do that is by using the function c,

10
00:00:36,820 --> 00:00:39,050
which stands for concatenate.

11
00:00:39,050 --> 00:00:43,780
So in this very simple example, I am defining eight object codes

12
00:00:43,780 --> 00:00:47,670
with three country codes, 380, 124, and 818.

13
00:00:47,670 --> 00:00:50,800
We're going to use this example going forward.

14
00:00:50,800 --> 00:00:52,630
We can also create character vectors.

15
00:00:52,630 --> 00:00:55,030
For example, we can create a character vector

16
00:00:55,030 --> 00:00:59,260
with the names of the three countries associated with those three codes.

17
00:00:59,260 --> 00:01:01,810
We use the quotes to denote that the entries are

18
00:01:01,810 --> 00:01:04,390
characters rather than variables.

19
00:01:04,390 --> 00:01:08,500
If you don't use the quotes, R looks for variables with those names,

20
00:01:08,500 --> 00:01:10,750
and in this case, it will return an error,

21
00:01:10,750 --> 00:01:14,200
because you haven't defined object's named Italy, Canada, or Egypt.

22
00:01:14,200 --> 00:01:17,650
Sometimes it's useful to name the entries of a vector.

23
00:01:17,650 --> 00:01:21,400
For example, when defining a vector of country codes as we did,

24
00:01:21,400 --> 00:01:24,310
we can use the names to connect the two.

25
00:01:24,310 --> 00:01:28,060
So here we would type codes, then use concatenate.

26
00:01:28,060 --> 00:01:31,040
But this time, instead of just writing out the three numbers,

27
00:01:31,040 --> 00:01:32,530
we would assign a name to each one.

28
00:01:32,530 --> 00:01:36,010
And as you can see, when we look at the object codes,

29
00:01:36,010 --> 00:01:40,180
we can see that the three numbers are associated with three countries.

30
00:01:40,180 --> 00:01:43,970
The object codes continues to be a numeric vector though.

31
00:01:43,970 --> 00:01:47,590
If we type class(codes), we can see that it's numeric.

32
00:01:47,590 --> 00:01:52,720
Now, if we use strings without quotes, it looks a little confusing to some.

33
00:01:52,720 --> 00:01:54,820
But you should know that you can use strings here.

34
00:01:54,820 --> 00:01:58,120
You can do the same exact expression.

35
00:01:58,120 --> 00:02:02,120
But this time, you use quotes to define the names, like this.

36
00:02:02,120 --> 00:02:05,740
There's no difference between this call and the previous one.

37
00:02:05,740 --> 00:02:10,419
This is one of the many ways in which R is quirky compared to other languages.

38
00:02:10,419 --> 00:02:14,290
Note that we can also use the names functions to assign names

39
00:02:14,290 --> 00:02:15,940
to the entries of a vector.

40
00:02:15,940 --> 00:02:18,760
Here's a code that we would use that does exactly

41
00:02:18,760 --> 00:02:21,700
the same thing as the previous two chunks of code,

42
00:02:21,700 --> 00:02:24,790
but using the names function.

43
00:02:24,790 --> 00:02:27,520
All right, another useful function for creating vectors,

44
00:02:27,520 --> 00:02:31,750
and we use this often, is a function that generates sequences.

45
00:02:31,750 --> 00:02:34,800
The function is seq, stands for sequence.

46
00:02:34,800 --> 00:02:42,010
So if I type seq, then from 1, 10, it writes out the numbers from 1 to 10,

47
00:02:42,010 --> 00:02:45,220
consecutive integers from 1 to 10.

48
00:02:45,220 --> 00:02:48,340
In this function, the first argument defines the start,

49
00:02:48,340 --> 00:02:50,710
and the second defines the end.

50
00:02:50,710 --> 00:02:53,680
The default is to go in increments of 1.

51
00:02:53,680 --> 00:02:56,540
But a third argument, which defaults to 1,

52
00:02:56,540 --> 00:02:59,620
lets us tell seq how much to jump by.

53
00:02:59,620 --> 00:03:06,210
So for example, if I type seq(1, 10, 2), it would write out the odd numbers from

54
00:03:06,210 --> 00:03:07,950
1 to 9.

55
00:03:07,950 --> 00:03:10,470
Note that if we want consecutive integers,

56
00:03:10,470 --> 00:03:12,270
we can use the following shorthand.

57
00:03:12,270 --> 00:03:17,280
We can type 1:10 and we get the integers from 1 to 10.

58
00:03:17,280 --> 00:03:20,490
Now let's go over subsetting, an important topic.

59
00:03:20,490 --> 00:03:24,090
It lets us access specific parts of a vector.

60
00:03:24,090 --> 00:03:28,240
We use square brackets to access elements of a vector.

61
00:03:28,240 --> 00:03:31,800
So for example, we can access the second element of codes

62
00:03:31,800 --> 00:03:36,040
by simply typing codes, square bracket, 2, close square bracket.

63
00:03:36,040 --> 00:03:39,390
And you can see it shows us the country code for Canada.

64
00:03:39,390 --> 00:03:43,650
You can get more than one entry by using a multi-entry vector as an index.

65
00:03:43,650 --> 00:03:47,910
So we can type codes, and then create the vector 1, 3.

66
00:03:47,910 --> 00:03:50,790
And now we get the first and third element.

67
00:03:50,790 --> 00:03:53,130
The sequences defined above are particularly

68
00:03:53,130 --> 00:03:56,310
useful if you want to access, say, the first two elements.

69
00:03:56,310 --> 00:03:59,070
So we can type codes and then 1 through 2,

70
00:03:59,070 --> 00:04:01,800
we get the first two elements of our vector.

71
00:04:01,800 --> 00:04:07,200
If the elements have names, we can also access the entries using these names.

72
00:04:07,200 --> 00:04:12,290
For example, if we type codes, open brackets, and then canada in quotes,

73
00:04:12,290 --> 00:04:16,440
it will access the entry that has the name Canada.

74
00:04:16,440 --> 00:04:20,769
We can also have vector of names that are longer than 1.

75
00:04:20,769 --> 00:04:23,940
So we can also call codes, open brackets,

76
00:04:23,940 --> 00:04:26,175
and then have a vector of string names, and it

77
00:04:26,175 --> 00:04:31,220
will return the two elements associated with those two names.

78
00:04:31,220 --> 00:04:37,718


