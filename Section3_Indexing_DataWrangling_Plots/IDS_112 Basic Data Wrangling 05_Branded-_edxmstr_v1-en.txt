
[MUSIC PLAYING]
RAFAEL IRIZARRY: Up to now, we have been manipulating vectors
by reordering them and subsetting them through indexing.
But once we start more advanced analyses,
we will want to manipulate data tables.
For this purpose, we will introduce the dplyr package,
which provides intuitive functionality for working with tables.
Later in the series, we will cover the dplyr package in much more depth.
Once you install dplyr, you can load it using library(dplyr) like this.
This package introduces functions that perform the most common operations
in data manipulation and uses names for these functions that
are relatively easy to remember.
For example, to change the data table by adding a new column
or changing an existing one, we use mutate.
To filter the data by subsetting rows, we use the function filter.
And to subset the data by selecting specific columns, we use select.
We can also perform a series of operations--
for example, select this and then filter that--
by sending the results of one function to another function
using what is called the pipe operator.
We now demonstrate all this with examples.
Let's go back to our murder rate example.
For this analysis, we want all the necessary information
to be included in the data table.
So the first task is to add the murder rate to our data frame.
The function mutate takes the data frame as the first argument
and the name and value of the variable in the second argument.
We're going to use the convention name equals value.
So as an example, to add murder rate, we use the following.
We say mutate, then murders.
That's the first argument.
That's the table we're going to manipulate.
And then we define a new column called rate.
And that column is going to be the total divided by the population, multiplied
by 100,000.
Note that in this call, we use total and population.
These are not defined in the workspace.
What is happening here is that the mutate function
knows to look for these variables in the murders data frame
rather than in the workspace.
This makes the call much cleaner, because we
don't have to keep writing murders over and over again.
So the intuitive line of code above does exactly what we want.
We can see the new column by just looking at the murders data set.
And we can see there's a new column called rate
and it has the murder rates.
Note that we have redefined the murders object.
And remember that, if you reload it from the dslabs package,
you will overwrite what you've just created.
All right, now let's learn about the filter function.
Suppose that we want to filter the data table to only show
the entries for which the murder rate is lower than 0.71.
To do this, you use the filter function, which
takes the data table as the first argument
and the conditional statement as the next.
Like in the mutate function, we can use the data table variable
names inside the function, and we'll know that we mean the columns and not
objects in the workspace.
So we would type filter, then the data table, murders, comma.
And the second argument is the conditional, rate less than
or equal to 0.71.
When we type this, we get the five states
for which the conditional is true.
We get the entire table for these five states.
Now let's learn about the select function.
Although our data table only has six columns,
some data tables include hundreds.
So it's often useful to select just the columns that you want to work with.
Here we defined a new object, new_table.
And it's the murders data table, but only three columns
of it, state, region, and rate.
Once we define this new object, then we filter it
for the states that have a rate of less than 0.71.
And you can see the result. It's a smaller table now
with just three columns and it's only the five states with murder rates
smaller than 0.71.
Note that in the call to select, the first argument, murders, is an object.
It's the data table.
But state, region, and rate are variable names from that table.
OK.
We've learned select, mutate, and filter.
Now we're going to learn to put them all together using the pipe.
In the code above, we want to show the three variables for states
that have murder rates below 0.71.
To do this, we define an intermediate object.
It was called new_table.
In dplyr, we can avoid this.
We can write code that looks more like our description of what
we want to do, take the original data, select some columns,
and then filter some rows.
For such operations, we can use the pipe.
The code looks like this.
We start with a data table, murders.
We pipe that data into the select function.
That performs an operation.
The result of that operation gets piped into the filter function,
and that gives us the final result, which you can see right here.
Notice that we get the same answer as in the previous code.
Know that when using the pipe, we no longer
need to specify the required argument, as the dplyr
function assumes that whatever is being piped is what should be operated on.
