Section 3 Overview
    Section 3 introduces the R commands and techniques that help you wrangle, analyze, and visualize data.

In Section 3.1, you will:
    Subset a vector based on properties of another vector. 
    Use multiple logical operators to index vectors.
    Extract the indices of vector elements satisfying one or more logical conditions. 
    Extract the indices of vector elements matching with another vector.
    Determine which elements in one vector are present in another vector. 

In Section 3.2, you will:
    Wrangle data tables using functions in the dplyr package. 
    Modify a data table by adding or changing columns. 
    Subset rows in a data table.
    Subset columns in a data table. 
    Perform a series of operations using the pipe operator. 
    Create data frames. 

In Section 3.3, you will:
    Plot data in scatter plots, box plots, and histograms. 

In Section 3.4, you will:
    Use summarize() to facilitate summarizing data in dplyr.
    Learn about the dot placeholder.
    Learn how to group and then summarize in dplyr.
    Learn how to sort data tables in dplyr.

In Section 3.5, you will:
    Learn how to subset and summarize data using data.table.
    Learn how to sort data frames using data.table.

logical operators:
    - We can use logicals to index vectors which returns an array with similar length with "true" in the field where the condition was met.
    - Using the function sum() on a logical vector returns the number of entries that are "true".
    - The logical operator “&” makes two logicals true only when they are both true.
    - logical operators are: less than <, less or eq <=, more than >, more or eq =>, equal ==, not eq !=, not !, or |, and &

Indexing Functions:
    - The function which() gives us the entries of a logical vector that are true.
    ```
        index <- which(murders$state == "Massachusetts")
        index
        murder_rate[index]
    ```
    >>> 1.802

    - The function match() looks for entries in a vector and returns the index needed to access them.
    ```
        index <- match(c("New York", "Florida", "Texas"), murders$state)
        index
    ```
    >>> 33, 10, 44
    ```
        murders$state[index]
        murder_rate[index]
    ```
    >>> "New York", "Florida", "Texas"
    >>> 2.668, 3.398, 3.201

    - We use the function %in% if we want to know whether or not each element of a first vector is in a second vector.
    ```
        x <- c("a", "b", "c", "d", "e")
        y <- c("a", "d", "f")
        y %in% x
    ```
    >>> TRUE, TRUE, FALSE
    ```
        # to see if Boston, Dakota, and Washington are states
        c("Boston", "Dakota", "Washington") %in% murders$state
    ```
    >>> FALSE, FALSE, TRUE

Basic Data Wrangling:
    - To change a data table by adding a new column, or changing an existing one, we use the mutate() function.
    - To filter the data by subsetting rows, we use the function filter().
    - To subset the data by selecting specific columns, we use the select() function.
    - We can perform a series of operations by sending the results of one function to another function using the pipe operator, %>%.

Working with data manilpuation package (dplyr)
    - mutate() adds new columns, syntax -> mutate(dataset, new_var = calculation)
    - filter() filters the data with a condition as follows -> filter(dataset, condition)
    - select() select certain columns from the dataset -> select(dataset, column1, column2, column2)
    - %>% passes the result of a function to the next one, you won't need to add the argument which is the dataset anymore

Creating dataframes
    - Creating a data frame can be done as follows -> data.frame(column1 = c("v1", "v2"), column2 = c(1,2))
    - By default, data.frame() creates the string variables as factors, to disable it, set ```stringsAsFactors = FALSE```  in the arguments
    ```
    data.frame(column1 = c("v1", "v2"), column2 = c(1,2),  stringsAsFactors = FALSE)
    ```
    - nrow() counts the number of rows in a dataset

Key Points
    - We can create a simple scatterplot using the function plot().
    - Histograms are graphical summaries that give you a general overview of the types of values you have.  In R, they can be produced using the hist() function.
    - Boxplots provide a more compact summary of a distribution than a histogram and are more useful for comparing distributions. They can be produced using the boxplot() function.
    - Boxplot() is used as follows boxplot(numericColumn~Categorical, data = dataset)

Key Points
    - The summarize() function from dplyr provides an easy way to compute summary statistics
        ```
        s <- murders %>% 
        filter(region == "West") %>%
        summarize(minimum = min(rate), 
                    median = median(rate), 
                    maximum = max(rate))
        s
        ```
    - The quantile() function can be used to return the min, median, and max in a single line of code as follows:
        ```
        s <- murders %>% 
        filter(region == "West") %>%
        summarize(range = quantile(rate, c(0, 0.5, 1)))
        s
        ```
    - To access those values returned from summarize, we should use the accessor "$", for example:
        ```
        s$minimum
        ``` 
    - The quantile() will return data in one column with a row for each function, if we need to change it into columns, we should use a special function that we will implement manually
        ```
        # returning minimum, median, and maximum as a data frame
        my_quantile <- function(x){
        r <-  quantile(x, c(0, 0.5, 1))
        data.frame(minimum = r[1], median = r[2], maximum = r[3]) 
        }
        murders %>% 
        filter(region == "West") %>%
        summarize(my_quantile(rate))
        ```
    - summarize() as most dplyr functions, returns a data.frame object. We can access values either with "$" accessor or with pull() function
    - The dot "." is a place holder for the data in the pipe (%>%), to access the data at any time, use the dot "."
        ```
        # using the dot to access the rate
        us_murder_rate <- murders %>% 
        summarize(rate = sum(total) / sum(population) * 10^5) %>%
        .$rate
        us_murder_rate
        class(us_murder_rate) 
        ```
    - The group_by() function groups the data in categories in a way that makes summarize() work on each group differently, just like a pivot table

    - The arrange() from dplyr is used for data.frame objects givin the columns as an input separated with commas "," .The the sort() and order() are used for vectors.
    - The desc() funciton can be nested within the arrange to sort in a descending oreder
        ```
        murders %>% arrange(region, population) %>% head()
        ```
    - We can get first rows with the head() and the top_n() functions, top_n() required the number of rows it should recieve, and the column to get the top elements of
    - To ignore the NAs, we can use the na.rm argument:
        ```
        mean(na_example, na.rm = TRUE)
        sd(na_example, na.rm = TRUE)
        ```
3.5 Introduction to data.table
Key Points
    - In this course, we often use tidyverse packages to illustrate because these packages tend to have code that is very readable for beginners.
    - There are other approaches to wrangling and analyzing data in R that are faster and better at handling large objects, such as the data.table package.
    - convert the data frame into a data.table object
        ```
        murders_table <- setDT(murders)
        ```
    - Selecting in data.table uses notation similar to that used with matrices, the .() tells R that those between () are column names.
        ```
        murders_table[, c("state", "region")] |> head()
        murders_table[, .(state, region)] |> head()
        ```
    - To add a column in data.table, you can use the := function.
        ```
        murders[, rate := total / population * 100000]
        head(murders_table)
        murders[, ":="(rate = total / population * 100000, rank = rank(population))]
        head(murders_table)
        ```
    - Because the data.table package is designed to avoid wasting memory, when you make a copy of a table, it does not create a new object. 
    - The := function changes by reference. If you want to make an actual copy, you need to use the copy() function.
    - Side note: the R language has a new, built-in pipe operator as of version 4.1: |>. This works similarly to the pipe %>% you are already familiar with. You can read more about the |> pipe here {https://www.r-bloggers.com/2021/05/the-new-r-pipe/}.

    - Subsetting in data.table uses notation similar to that used with matrices.

    - In data.table we can call functions inside .() and they will be applied to rows.
    - The group_by followed by summarize in dplyr is performed in one line in data.table using the by argument.

    - To order rows in a data frame using data.table, we can use the same approach we used for filtering.
    - The default sort is an ascending order, but we can also sort tables in descending order.
    - We can also perform nested sorting by including multiple variables in the desired sort order.

    - A tbl (pronounced "tibble") is a special kind of data frame.
    - Tibbles are the default data frame in the tidyverse.
    - Tibbles display better than regular data frames.
    - Subsets of tibbles are tibbles, which is useful because tidyverse functions require data frames as inputs.
    - Tibbles will warn you if you try to access a column that doesn't exist.
    - Entries in tibbles can be complex - they can be lists or functions.
    - The function group_by() returns a grouped tibble, which is a special kind of tibble.